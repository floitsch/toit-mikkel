name: CI

on:
  push:
  release:
    types: [published]

jobs:
  build:
    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        # macos-10.15, as we currently need Clang 12 (https://github.com/toitlang/toit/issues/130)
        # windows-2022, as it's currently later than windows-latest.
        container: [ windows-2022 ]
        shard: [1]

    runs-on: ${{ matrix.container }}

    steps:
      - name: Set up constants
        id: constants
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo ::set-output name=artifact::toit-linux.tar.gz
            echo ::set-output name=total_shards::5
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo ::set-output name=artifact::toit-macos.tar.gz
            echo ::set-output name=total_shards::5
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo ::set-output name=artifact::toit-windows.tar.gz
            echo ::set-output name=total_shards::1
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi
        shell: bash

      - uses: actions/checkout@v2

      - name: Fetch tags
        # The github checkout is shallow and doesn't have tags.
        run: |
          git fetch --tags

      # We only need the tpkg and mbedtls submodule for building.
      - name: Initialize mbedtls submodule
        run: |
          cd third_party/esp-idf
          git submodule update --init .
          git submodule update --init components/mbedtls

      - name: Initialize tpkg submodule
        run: |
          cd tools/tpkg
          git submodule update --init .

      # Use Go 1.17
      - name: Switch to Go 1.17
        run:
          echo "$GOROOT_1_17_X64"/bin >> $GITHUB_PATH

      # Get values for cache paths to be used in later steps
      - name: Get Go paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-mod-

      # We create a new id every second.
      # The 'restore-keys' below will make sure that we continue using earlier versions.
      - name: Create timestamp
        id: timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Ccache cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ steps.timestamp.outputs.timestamp }}
          restore-keys: ${{ runner.os }}-ccache-

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build ccache gcc-multilib g++-multilib
          ninja --version
          cmake --version
          gcc --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja ccache
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja ccache
          ninja --version
          ccache --version
          cmake --version

      # Build using make.
      - name: make
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
          SHARD_START: ${{ matrix.shard }}
          SHARD_STRIDE: ${{ steps.constants.outputs.total_shards }}
        shell: bash
        run: |
          make all
          if [ "$RUNNER_OS" == "Linux" ]; then
            make CROSS_ARCH=host32 all-cross
          fi

      # Test.
      - name: test
        env:
          IDF_PATH: ${{ github.workspace }}/third_party/esp-idf
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: '6'
          CCACHE_MAXSIZE: 400M
          SHARD_START: ${{ matrix.shard }}
          SHARD_STRIDE: ${{ steps.constants.outputs.total_shards }}
        shell: bash
        run: |
          make test
          make test-health
          if [ "$RUNNER_OS" == "Linux" ]; then
            cd build/host32
            ninja check
          fi

